package com.mazanov.rick_and_morty.data.repository_Implementationimport com.mazanov.rick_and_morty.data.local_data_source.dao.PersonDaoimport com.mazanov.rick_and_morty.data.local_data_source.database.AppDatabaseimport com.mazanov.rick_and_morty.data.local_data_source.mapper.PersonMapperLocalimport com.mazanov.rick_and_morty.data.remote_data_source.mapper.PersonMapperimport com.mazanov.rick_and_morty.data.remote_data_source.retrofit.ApiServiceimport com.mazanov.rick_and_morty.domain.models.PersonModelimport com.mazanov.rick_and_morty.domain.repository.Repositoryimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport javax.inject.Injectclass RepositoryImpl @Inject constructor(    private val mapper: PersonMapper,    private val localMapper: PersonMapperLocal,    private val personDao: PersonDao,    private val apiService: ApiService) : Repository {    private val _persons = mutableListOf<PersonModel>()    override fun getAllCharacters(page: Int): Flow<List<PersonModel>> = flow {        val response = apiService.getAllCharactersFromApi(page)        val personModelList = mapper.mapResultDtoToResultFromApi(response)        _persons.addAll(personModelList.personList)        emit(_persons.toList())    }    override suspend fun addPersonToDatabase(person: PersonModel) {        val item = localMapper.mapModelToDbEntity(person)        personDao.addPersonToDb(item)    }    override fun getAllPersonsFromDatabase(): Flow<List<PersonModel>> = flow {        val personsFromDb = personDao.getAllPersonFromDb()        val result = localMapper.mapDbEntityToListModels(personsFromDb)        emit(result.toList())    }}