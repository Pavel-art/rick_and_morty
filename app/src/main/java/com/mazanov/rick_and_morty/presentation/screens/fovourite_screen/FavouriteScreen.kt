package com.mazanov.rick_and_morty.presentation.screens.fovourite_screenimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.runtime.Composableimport androidx.compose.runtime.SideEffectimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.hilt.navigation.compose.hiltViewModelimport com.mazanov.rick_and_morty.presentation.navigation.NavigationStateimport com.mazanov.rick_and_morty.presentation.screens.character_screen.CharacterScreenViewModel@Composablefun FavouriteScreen(    navigationState: NavigationState) {    val characterScreenViewModel: CharacterScreenViewModel = hiltViewModel()    val screenState = characterScreenViewModel.state.observeAsState(FavouriteScreenState.InitState)    val currentState = screenState.value    Scaffold(        topBar = {            TopAppBar(                backgroundColor = MaterialTheme.colors.surface,                modifier = Modifier.height(55.dp),                elevation = 0.dp            ) {                IconButton(onClick = { navigationState.navHostController.popBackStack() }) {                    Icon(                        imageVector = Icons.Filled.ArrowBack,                        contentDescription = "Back",                        tint = Color.LightGray                    )                }                Spacer(modifier = Modifier.width(10.dp))                Text(                    text = "Character",                    fontSize = 20.sp,                    color = Color.LightGray                )            }        }    ) { paddingValues ->        if (currentState is FavouriteScreenState.InitState) {            SideEffect {                characterScreenViewModel.getFavouritePersons()            }            Box(                modifier = Modifier.fillMaxSize(),                contentAlignment = Alignment.Center            )  {                Text(                    text = "Favourite list is empty",                    fontSize = 22.sp,                    color = Color.LightGray                )            }        }        if ( currentState is FavouriteScreenState.LoadSate) {            LazyColumn(                modifier = Modifier                    .fillMaxSize()                    .padding(paddingValues)                    .background(MaterialTheme.colors.background)                    .padding(horizontal = 8.dp, vertical = 6.dp)            ) {                items(                    items = currentState.content,                    key = { it.id })                {                    FavouriteCardItem(                        cardContent = it,                        navigationState = navigationState                    )                    Spacer(                        modifier = Modifier                            .fillMaxWidth()                            .height(2.dp)                            .background(MaterialTheme.colors.secondary)                    )                }            }        }    }}