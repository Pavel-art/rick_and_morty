package com.mazanov.rick_and_morty.presentation.ui.screens.main_screenimport android.util.Logimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Searchimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport com.mazanov.rick_and_morty.domain.models.PersonModel.Companion.TOTAL_PAGES@Preview@Composablefun MainScreen() {    val viewModel: MainScreenViewModel = viewModel()    val screenState = viewModel.mainScreenState.observeAsState(MainScreenState.Initial)    val currentState = screenState.value    val currentPage = viewModel.page.observeAsState(1)    Scaffold(        topBar = {            TopAppBar(                backgroundColor = Color(0xff1C1D1F),                modifier = Modifier                    .height(55.dp)                    .fillMaxWidth(),            ) {                Box(contentAlignment = Alignment.CenterEnd) {                    Row(                        Modifier.fillMaxWidth(),                        horizontalArrangement = Arrangement.Center,                    ) {                        Text(                            text = "Character",                            fontSize = 20.sp,                            color = Color.White                        )                    }                    IconButton(onClick = {}) {                        Icon(                            imageVector = Icons.Filled.Search,                            contentDescription = "Search",                            tint = Color.White                        )                    }                }            }        }    ) { paddingValues ->        if (currentState is MainScreenState.Loading) {            Box(                modifier = Modifier                    .fillMaxSize()                    .background(Color(0xff1C1D1F)),                contentAlignment = Alignment.Center            ) {                CircularProgressIndicator(color = Color.White)            }        }        if (currentState is MainScreenState.Error) {            Column(                modifier = Modifier                    .fillMaxSize()                    .background(Color(0xff1C1D1F))                    .padding(8.dp),                horizontalAlignment = Alignment.CenterHorizontally            ) {                Text(text = "Error 404", color = Color.White)                Text(text = currentState.toString(), color = Color.White)            }        }        if (currentState is MainScreenState.Load) {            LazyColumn(                modifier = Modifier                    .fillMaxSize()                    .padding(paddingValues)                    .background(Color(0xff242632))                    .padding(horizontal = 8.dp, vertical = 6.dp)            ) {                items(currentState.content, { it.id }) {                    CardItem(cardContent = it)                    Spacer(                        modifier = Modifier                            .fillMaxWidth()                            .height(2.dp)                            .background(Color(0xff3C3E44))                    )                }                item {                    if (currentState.nextDataIsLoading) {                        Box(                            modifier = Modifier                                .fillMaxWidth()                                .wrapContentHeight()                                .padding(16.dp),                            contentAlignment = Alignment.Center,                        ) {                            CircularProgressIndicator(color = Color.White)                        }                    } else {                        SideEffect {                                viewModel.getNextPage()                        }                    }                }            }        }    }}