package com.mazanov.rick_and_morty.presentation.screens.main_screenimport androidx.compose.animation.*import androidx.compose.foundation.ScrollStateimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.gestures.Orientationimport androidx.compose.foundation.gestures.ScrollableStateimport androidx.compose.foundation.gestures.scrollableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.foundation.verticalScrollimport androidx.compose.material.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Closeimport androidx.compose.material.icons.filled.Favoriteimport androidx.compose.material.icons.filled.Searchimport androidx.compose.material.pullrefresh.PullRefreshIndicatorimport androidx.compose.material.pullrefresh.pullRefreshimport androidx.compose.material.pullrefresh.rememberPullRefreshStateimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.focus.FocusRequesterimport androidx.compose.ui.focus.focusRequesterimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport com.mazanov.rick_and_morty.Rimport com.mazanov.rick_and_morty.presentation.navigation.NavigationStateimport com.mazanov.rick_and_morty.presentation.navigation.Screenimport com.mazanov.rick_and_morty.presentation.theme.MainBackgroundColor@OptIn(ExperimentalAnimationApi::class, ExperimentalMaterialApi::class)@Composablefun MainScreen(    navigationState: NavigationState) {    val viewModel: MainScreenViewModel = hiltViewModel()    val screenState = viewModel.mainScreenState.observeAsState(MainScreenState.Initial)    val currentState = screenState.value    val isNextPage = viewModel.isNextPage.observeAsState(false)    val personsBySearch by viewModel.persons.collectAsState()    val isSearchOpen by viewModel.isSearchOpen.collectAsState()    val isRefreshing by viewModel.isRefreshing.collectAsStateWithLifecycle()    val pullRefreshState = rememberPullRefreshState(isRefreshing, viewModel::refresh)    Scaffold(        topBar = {            TopAppBar(                backgroundColor = MaterialTheme.colors.surface,                modifier = Modifier                    .height(55.dp)                    .fillMaxWidth(),                elevation = 0.dp            ) {                AnimatedContent(                    targetState = isSearchOpen,                    transitionSpec = {                        slideInVertically { it } with slideOutVertically { -it }                    }                ) { isOpen ->                    if (isOpen) {                        SearchInputField(                            viewModel = viewModel                        )                    } else {                        Row(                            Modifier.fillMaxWidth(),                            horizontalArrangement = Arrangement.SpaceBetween,                            verticalAlignment = Alignment.CenterVertically                        ) {                            IconButton(                                onClick = { navigationState.navigateTo(Screen.Favourite.rout) }                            ) {                                Icon(                                    modifier = Modifier.size(25.dp),                                    imageVector = Icons.Default.Favorite,                                    contentDescription = "favourite icon button",                                    tint = Color.LightGray                                )                            }                            Text(                                text = stringResource(R.string.title_app_bar),                                fontSize = 22.sp,                                color = Color.LightGray                            )                            IconButton(onClick = { viewModel.isOpenCloseSearch() }) {                                Icon(                                    imageVector = Icons.Filled.Search,                                    contentDescription = "Search",                                    tint = Color.LightGray                                )                            }                        }                    }                }            }        }    ) { paddingValues ->        if (currentState is MainScreenState.Loading) {            Box(                modifier = Modifier                    .fillMaxSize()                    .background(MainBackgroundColor),                contentAlignment = Alignment.Center            ) {                CircularProgressIndicator(color = MaterialTheme.colors.primary)            }        }        if (currentState is MainScreenState.Error) {            Column(                modifier = Modifier                    .fillMaxSize()                    .background(MaterialTheme.colors.background)                    .padding(8.dp),                horizontalAlignment = Alignment.CenterHorizontally            ) {                Text(text = "Error 404", color = Color.White)                Text(text = currentState.toString(), color = Color.White)            }        }        if (currentState is MainScreenState.Load) {            Box(                Modifier                    .pullRefresh(pullRefreshState)            ) {                LazyColumn(                    modifier = Modifier                        .fillMaxSize()                        .padding(paddingValues)                        .background(MaterialTheme.colors.background)                        .padding(horizontal = 8.dp, vertical = 6.dp)                ) {                    items(                        items = personsBySearch,                        key = { it.id })                    {                        CardItem(                            cardContent = it,                            navigationState = navigationState                        )                        Spacer(                            modifier = Modifier                                .fillMaxWidth()                                .height(2.dp)                                .background(MaterialTheme.colors.secondary)                        )                    }                    item {                        if (isNextPage.value) {                            Box(                                modifier = Modifier                                    .fillMaxWidth()                                    .wrapContentHeight()                                    .padding(16.dp),                                contentAlignment = Alignment.Center,                            ) {                                CircularProgressIndicator(color = MaterialTheme.colors.primary)                            }                        } else {                            SideEffect {                                viewModel.getNextPage()                            }                        }                    }                }                PullRefreshIndicator(                    refreshing = isRefreshing,                    state = pullRefreshState,                    modifier = Modifier.align(Alignment.TopCenter),                    contentColor = Color.LightGray,                    scale = true                )            }        }    }}@Composableprivate fun SearchInputField(    viewModel: MainScreenViewModel) {    val focusRequester = FocusRequester()    val searchText by viewModel.searchText.collectAsState()    TextField(        value = searchText,        onValueChange = viewModel::onSearchTextChange,        modifier = Modifier            .fillMaxWidth()            .focusRequester(focusRequester),        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),        keyboardActions = KeyboardActions(            onSearch = {                viewModel.onSearchTextChange(searchText)            }        ),        singleLine = true,        trailingIcon = {            IconButton(onClick = {                viewModel.searchReset()                viewModel.isOpenCloseSearch()            }) {                Icon(                    imageVector = Icons.Filled.Close,                    contentDescription = "close",                    tint = Color.LightGray                )            }        },        placeholder = {            Text(                text = "Search...",                color = MaterialTheme.colors.onPrimary,                fontSize = 20.sp            )        },        colors = TextFieldDefaults.textFieldColors(            textColor = MaterialTheme.colors.primary,            backgroundColor = MaterialTheme.colors.surface,            focusedIndicatorColor = MaterialTheme.colors.surface,        )    )    LaunchedEffect(Unit) {        focusRequester.requestFocus()    }}