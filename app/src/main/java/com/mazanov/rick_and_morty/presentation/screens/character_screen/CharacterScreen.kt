package com.mazanov.rick_and_morty.presentation.screens.character_screenimport android.annotation.SuppressLintimport android.content.res.Configurationimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.verticalScrollimport androidx.compose.material.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.filled.Favoriteimport androidx.compose.material.icons.outlined.Favoriteimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalConfigurationimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport coil.compose.AsyncImageimport com.mazanov.rick_and_morty.assets.fonts.mainFontimport com.mazanov.rick_and_morty.domain.models.PersonModelimport com.mazanov.rick_and_morty.presentation.navigation.NavigationStateimport com.mazanov.rick_and_morty.presentation.theme.AppBarColorimport com.mazanov.rick_and_morty.presentation.theme.PersonBackgroundColorimport com.mazanov.rick_and_morty.presentation.theme.TitleColor@SuppressLint("UnusedMaterialScaffoldPaddingParameter")@Composablefun CharacterScreen(    navigationState: NavigationState,    content: PersonModel) {    Scaffold(        topBar = {            TopAppBar(                backgroundColor = MaterialTheme.colors.surface,                modifier = Modifier.height(55.dp),                elevation = 0.dp            ) {                IconButton(onClick = { navigationState.navHostController.popBackStack() }) {                    Icon(                        imageVector = Icons.Filled.ArrowBack,                        contentDescription = "Back",                        tint = Color.LightGray                    )                }                Spacer(modifier = Modifier.width(10.dp))                Text(                    text = "Character",                    fontSize = 20.sp,                    color = Color.LightGray                )            }        }    ) {        val configuration = LocalConfiguration.current        when (configuration.orientation) {            Configuration.ORIENTATION_LANDSCAPE -> {                Row(                    modifier = Modifier                        .fillMaxSize()                        .background(MaterialTheme.colors.background),                    horizontalArrangement = Arrangement.SpaceEvenly,                    verticalAlignment = Alignment.CenterVertically                ) {                    Column(                        modifier = Modifier                            .padding(it)                            .padding(8.dp)                            .fillMaxHeight(),                        horizontalAlignment = Alignment.CenterHorizontally                    ) {                        Text(                            text = content.name,                            fontSize = 20.sp,                            fontFamily = mainFont,                            color = MaterialTheme.colors.primary,                        )                        Box(                            modifier = Modifier.padding(vertical = 8.dp),                            contentAlignment = Alignment.TopEnd                        )                        {                            AsyncImage(                                model = content.image,                                contentDescription = "image avatar",                                modifier = Modifier                                    .size(220.dp)                                    .clip(RoundedCornerShape(10.dp)),                                contentScale = ContentScale.Fit,                            )                            IconButton(                                onClick = { /*TODO*/ },                            ) {                                Icon(                                    modifier = Modifier                                        .padding(8.dp)                                        .size(30.dp),                                    imageVector = Icons.Filled.Favorite,                                    contentDescription = "favourite iconButton",                                    tint = MaterialTheme.colors.primary                                )                            }                        }                        Row(                            verticalAlignment = Alignment.CenterVertically,                            horizontalArrangement = Arrangement.Center                        ) {                            val statusColor = when (content.status) {                                "Alive" -> Color.Green                                "Dead" -> Color.Red                                else -> Color.White                            }                            Box(                                modifier = Modifier                                    .size(10.dp)                                    .clip(RoundedCornerShape(100))                                    .background(statusColor)                            )                            Spacer(modifier = Modifier.width(8.dp))                            Text(                                text = content.status,                                fontSize = 18.sp,                                color = Color.White,                            )                        }                    }                    Column(                        verticalArrangement = Arrangement.Center,                        horizontalAlignment = Alignment.CenterHorizontally                    ) {                        TextInfo(                            title = "Gender:",                            info = content.gender,                            fontSize = 18,                            modifier = Modifier.padding(vertical = 4.dp)                        )                        TextInfo(                            title = "Species:",                            info = content.species,                            fontSize = 18,                            modifier = Modifier.padding(vertical = 4.dp)                        )                        TextInfo(                            title = "Last known location:",                            info = content.location.name,                            fontSize = 18,                            modifier = Modifier.padding(vertical = 4.dp)                        )                        TextInfo(                            title = "Origin",                            info = content.origin.name,                            fontSize = 18,                            modifier = Modifier.padding(vertical = 4.dp)                        )                        TextInfo(                            title = "Was Created:",                            info = content.created,                            fontSize = 18,                            modifier = Modifier.padding(vertical = 4.dp)                        )                    }                }            }            else -> {                Column(                    modifier = Modifier                        .padding(it)                        .fillMaxSize()                        .background(MaterialTheme.colors.background),                    horizontalAlignment = Alignment.CenterHorizontally                ) {                    Column(                        modifier = Modifier.padding(20.dp),                        horizontalAlignment = Alignment.CenterHorizontally                    ) {                        Text(                            text = content.name,                            fontSize = 28.sp,                            fontFamily = mainFont,                            color = MaterialTheme.colors.primary,                        )                        Box(                            contentAlignment = Alignment.TopEnd                        )                        {                            AsyncImage(                                model = content.image,                                contentDescription = "image avatar",                                modifier = Modifier                                    .size(270.dp)                                    .clip(RoundedCornerShape(10.dp)),                                contentScale = ContentScale.Fit,                            )                            IconButton(                                onClick = { /*TODO*/ },                            ) {                                Icon(                                    modifier = Modifier                                        .padding(8.dp)                                        .size(30.dp),                                    imageVector = Icons.Filled.Favorite,                                    contentDescription = "favourite iconButton",                                    tint = MaterialTheme.colors.primary                                )                            }                        }                        Row(                            verticalAlignment = Alignment.CenterVertically                        ) {                            val statusColor = when (content.status) {                                "Alive" -> Color.Green                                "Dead" -> Color.Red                                else -> Color.White                            }                            Box(                                modifier = Modifier                                    .size(10.dp)                                    .clip(RoundedCornerShape(100))                                    .background(statusColor)                            )                            Spacer(modifier = Modifier.width(8.dp))                            Text(                                text = content.status,                                fontSize = 18.sp,                                color = Color.White,                            )                        }                        TextInfo(                            title = "Gender:",                            info = content.gender,                            modifier = Modifier.padding(vertical = 9.dp)                        )                        TextInfo(                            title = "Number of episodes:",                            info = "1",                            modifier = Modifier.padding(vertical = 9.dp)                        )                        TextInfo(                            title = "Species:",                            info = content.species,                            modifier = Modifier.padding(vertical = 9.dp)                        )                        TextInfo(                            title = "Last known location:",                            info = content.location.name,                            modifier = Modifier.padding(vertical = 9.dp)                        )                        TextInfo(                            title = "Origin",                            info = content.origin.name,                            modifier = Modifier.padding(vertical = 9.dp)                        )                        TextInfo(                            title = "Was Created:",                            info = content.created,                            modifier = Modifier.padding(vertical = 9.dp)                        )                    }                }            }        }    }}@Composableprivate fun TextInfo(    title: String,    info: String,    modifier: Modifier,    fontSize: Int = 14,) {    Column(        modifier = modifier,        horizontalAlignment = Alignment.CenterHorizontally    ) {        Text(            text = title,            fontSize = fontSize.sp,            color = MaterialTheme.colors.secondary,            fontWeight = FontWeight.Bold        )        Text(            text = info,            fontSize = fontSize.sp,            color = MaterialTheme.colors.primary,        )    }}